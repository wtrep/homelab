---
version: "3.9"

services:
  {% for name, details in services.items() %}
  {{ name }}:
    image: {{ details.image }}
    container_name: {{ name }}
    {% if name != 'traefik' %}
    depends_on:
      - traefik
    {% endif %}
    volumes:
      - {{ docker_persistant_folder }}/{{ name }}:{{ details.container_persistant_directory }}
      {% for volume in details.volumes | default([]) %}
      - {{ volume }}
      {% endfor %}
    {% if details.ports is defined %}
    ports:
      {% for port in details.ports %}
      - {{ port }}
      {% endfor %}
    {% endif %}
    environment:
      - PUID={{ users[name].uid }}
      - GUID={{ users[name].gid }}
      - TZ={{ timezone }}
      {% for variable in details.environment | default([]) %}
      - {{ variable }}
      {% endfor %}
      {% for secret in details.secrets | default([]) %}
      - {{ secret }}_FILE=/run/secrets/{{ secret }}
      {% endfor %}
    {% if details.labels is defined or details.no_load_balancer is not defined %}
    labels:
      - flame.type=application
      - flame.name={{ name }}
      - flame.url=https://{{ name }}.{{ domain_name }}
      {% if not details.no_load_balancer | default(False) %}
      - traefik.enable=true
      - traefik.http.routers.{{ name }}.rule=Host(`{{ name }}.{{ domain_name }}`)
      - traefik.http.routers.{{ name }}.entrypoints=websecure
      - traefik.http.routers.{{ name }}.tls=true
      - traefik.http.routers.{{ name }}.tls.certresolver=cloudflare
      {% if details.load_balancer_port is defined %}
      - traefik.http.services.{{ name }}.loadbalancer.server.port={{ details.load_balancer_port }}
      {% endif %}
      {% endif %}
      {% for label in details.labels | default([]) %}
      - {{ label }}
      {% endfor %}
    {% endif %}
    networks:
      - internal
    {% if details.secrets is defined %}
    secrets:
      {% for secret in details.secrets | default([]) %}
      - {{ secret }}
      {% endfor %}
    {% endif %}
    restart: unless-stopped
  {% endfor %}

networks:
  internal:

{% set merged_secrets = services | extract_secrets_from_services %}
{% if merged_secrets %}
secrets:
  {% for secret in merged_secrets %}
  {{ secret }}:
    external: true
  {% endfor %}
{% endif %}
