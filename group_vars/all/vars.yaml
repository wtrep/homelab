hostname: homeserver
domain_name: trep.cloud
timezone: America/Montreal
ntp_timezone: "{{ timezone }}"
username: wtrep

# Network
lan_network: 192.168.1.0/24

# File system
media_folder: /tank
data_root_folder: /minitank/data
time_machine_root_folder: /minitank/timemachine
docker_persistent_backup_folder: /minitank/appdata

# Containers
docker_persistent_folder: /opt/appdata

services:
  traefik:
    image: traefik
    container_persistent_directory: /etc/traefik
    access_to_ro_docker_socket: true
    prometheus_endpoint: traefik:9000
    ports:
      - 80:80
      - 443:443
      - 9000:9000
    environment:
      - CF_DNS_API_TOKEN={{ CF_DNS_API_TOKEN }}
    labels:
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.services.api@internal.loadbalancer.server.port=8080

  unifi:
    image: lscr.io/linuxserver/unifi-controller
    container_persistent_directory: /config
    load_balancer_port: 8443
    labels:
      - traefik.http.services.unifi.loadbalancer.server.scheme=https
    ports:
      - 8080:8080
      - 3478:3478/udp

  flame:
    image: pawelmalak/flame
    container_persistent_directory: /app/data
    access_to_ro_docker_socket: true
    load_balancer_port: 5005

  watchtower:
    image: containrrr/watchtower
    access_to_docker_socket: true
    no_load_balancer: true

  # Media
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd
    container_persistent_directory: /config
    load_balancer_port: 8080
    access_to_media: true
    volumes:
      - "{{ media_folder }}/downloads:/downloads"
    environment:
      - UMASK=003

  deluge:
    image: binhex/arch-delugevpn
    container_persistent_directory: /config
    load_balancer_port: 8112
    access_to_media: true
    volumes:
      - "{{ media_folder }}/downloads:/downloads"
    cap_add:
      - NET_ADMIN
    environment:
      - VPN_ENABLED=yes
      - VPN_USER={{ PIA_USERNAME }}
      - VPN_PASS={{ PIA_PASSWORD }}
      - VPN_PROV=pia
      - VPN_CLIENT=openvpn
      - STRICT_PORT_FORWARD=yes
      - ENABLE_PRIVOXY=yes
      - LAN_NETWORK={{ lan_network }}
      - NAME_SERVERS=1.1.1.1,1.0.0.1
      - UMASK=003

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_persistent_directory: /config
    load_balancer_port: 8989
    access_to_media: true
    volumes:
      - "{{ media_folder }}/downloads:/downloads"
      - "{{ media_folder }}/tv:/tv"

  radarr:
    image: lscr.io/linuxserver/radarr
    container_persistent_directory: /config
    load_balancer_port: 7878
    access_to_media: true
    volumes:
      - "{{ media_folder }}/downloads:/downloads"
      - "{{ media_folder }}/movies:/movies"

  channels:
    image: fancybits/channels-dvr:nvidia
    container_persistent_directory: /channels-dvr
    load_balancer_port: 8089
    access_to_media: true
    ports:
      - 8089:8089
    volumes:
      - "{{ media_folder }}/recordings:/shares/DVR"
    set_user: true
    with_gpu: true

  jackett:
    image: lscr.io/linuxserver/jackett
    container_persistent_directory: /config
    load_balancer_port: 9117
    access_to_media: true
    volumes:
      - "{{ media_folder }}/downloads:/downloads"

  plex:
    image: lscr.io/linuxserver/plex
    container_persistent_directory: /config
    load_balancer_port: 32400
    access_to_media: true
    environment:
      - VERSION=docker
    labels:
      - traefik.http.services.plex.loadbalancer.server.scheme=https
    ports:
      - 32400:32400
      - 1900:1900/udp
      - 3005:3005
      - 5353:5353/udp
      - 8324:8324
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
      - 32469:32469
    volumes:
      - "{{ media_folder }}/movies:/movies"
      - "{{ media_folder }}/tv:/tv"
    with_gpu: true

  # Monitoring
  prometheus:
    image: prom/prometheus
    container_persistent_directory: /prometheus
    load_balancer_port: 9090
    prometheus_endpoint: localhost:9090
    set_user: true
    volumes:
      - '{{ docker_persistent_folder }}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana-oss
    container_persistent_directory: /var/lib/grafana
    load_balancer_port: 3000
    environment:
      - GF_PATHS_CONFIG=/var/lib/grafana/grafana.ini
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel,grafana-simple-json-datasource
    set_user: true

  unpoller:
    image: golift/unifi-poller
    container_persistent_directory: /config
    prometheus_endpoint: unpoller:9130
    load_balancer_port: 9130
    volumes:
      - "{{ docker_persistent_folder }}/unpoller/up.conf:/etc/unifi-poller/up.conf"
    secrets:
      - UNIFI_RO_PASSWORD
    set_user: true

  snmp-exporter:
    image: prom/snmp-exporter
    container_persistent_directory: /etc/snmp_exporter
    load_balancer_port: 9116
    set_user: true

  dcgm-exporter:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:2.3.1-2.6.1-ubuntu20.04
    container_persistent_directory: /etc/dcgm-exporter
    load_balancer_port: 9400
    prometheus_endpoint: dcgm-exporter:9400
    cap_add:
      - SYS_ADMIN
    with_gpu: true

  # Home automation
  home:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_persistent_directory: /config
    load_balancer_port: 8123

  deconz:
    image: ghcr.io/deconz-community/deconz-docker:latest
    container_persistent_directory: /opt/deCONZ
    load_balancer_port: 8085
    devices:
      - /dev/ttyACM0
    environment:
      - DECONZ_VNC_MODE=0
      - DECONZ_WEB_PORT=8085
      - DECONZ_WS_PORT=4043
      - DEBUG_INFO=1
      - DEBUG_APS=0
      - DEBUG_ZCL=0
      - DEBUG_ZDP=0
      - DEBUG_OTAU=0
    uid_environment_variable: DECONZ_UID
    gid_environment_variable: DECONZ_GID

# Samba
samba_apple_extensions: yes
samba_global_include: global-include.conf
samba_mitigate_cve_2017_7494: false
samba_server_min_protocol: "SMB3"
samba_server_max_protocol: "SMB3"
samba_server_string: "{{ hostname }}"

samba_users:
  - name: "{{ username }}"
    password: "{{ SAMBA_PASSWORD }}"

samba_shares:
  - name: Media
    guest_ok: no
    public: no
    read_only: no
    writable: yes
    browseable: yes
    owner: "{{ username }}"
    path: "{{ media_folder }}"
    valid_users: "@mediaserver"
    write_list: "@mediaserver"

  - name: Data
    guest_ok: no
    public: no
    read_only: no
    writable: yes
    browseable: yes
    owner: "{{ username }}"
    path: "{{ data_root_folder }}"
    valid_users: "{{ username }}"
    write_list: "{{ username }}"
    create_mode: "0600"
    directory_mode: "0700"
    force_create_mode: "0600"
    force_directory_mode: "0700"

  - name: TimeMachine
    guest_ok: no
    public: no
    read_only: no
    owner: "{{ username }}"
    vfs_objects:
      - name: fruit
        options:
        - name: time machine
          value: 'yes'
      - name: streams_xattr
    writable: yes
    browseable: yes
    path: "{{ time_machine_root_folder }}"
    valid_users: "{{ username }}"
    write_list: "{{ username }}"
    create_mode: "0600"
    directory_mode: "0700"
    force_create_mode: "0600"
    force_directory_mode: "0700"

# Unattended upgrades
unattended_origins_patterns:
  - 'origin=Ubuntu,archive=${distro_codename}-security'
  - 'o=Ubuntu,a=${distro_codename}'
  - 'o=Ubuntu,a=${distro_codename}-updates'
unattended_automatic_reboot: true
unattended_automatic_reboot_time: 05:00
